name: Fullstack app CI pipeline

on:
  push:
    branches: ["main"]

env:
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
  SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}

jobs:
  frontend-code-quality:
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: ./quiz-app
    strategy:
      matrix:
        node-version: [20.x]
        architecture: [x64]
    steps:
      - name: Check-out git repository
        uses: actions/checkout@v4

      - name: Setup nodejs ${{ matrix.node-version }} - ${{ matrix.architecture }}
        uses: actions/setup-node@v4

      - name: Install Java
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "21"

      - name: SonarQube scan
        uses: sonarsource/sonarqube-scan-action@master
        with:
          args: >
            -Dsonar.organization=${{ env.SONAR_ORGANIZATION }}
            -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }}
            -Dsonar.host.url=${{ env.SONAR_HOST_URL }}
            -Dsonar.login=${{ env.SONAR_TOKEN }}
            -Dsonar.sources=./
            -Dsonar.verbose=true

  backend-code-quality:
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: ./backend
    strategy:
      matrix:
        node-version: [20.x]
        architecture: [x64]
    steps:
      - name: Check-out git repository
        uses: actions/checkout@v4

      - name: Setup ${{ matrix.node-version }} - ${{ matrix.architecture }}
        uses: actions/setup-node@v4

      - name: Install Java
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "21"

      - name: SonarQube scan
        uses: sonarsource/sonarqube-scan-action@master
        with:
          args: >
            -Dsonar.organization=${{ env.SONAR_ORGANIZATION }}
            -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }}
            -Dsonar.host.url=${{ env.SONAR_HOST_URL }}
            -Dsonar.login=${{ env.SONAR_TOKEN }}
            -Dsonar.sources=./
            -Dsonar.verbose=true

  frontend-code-security:
    needs: frontend-code-quality
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: ./quiz-app
    permissions:
      actions: read
      security-events: write
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif --sarif-file-output=frontend-code-sec.sarif

      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@main
        with:
          sarif_file: frontend-code-sec.sarif

  backend-code-security:
    needs: backend-code-quality
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: ./backend
    permissions:
      actions: read
      security-events: write
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif --sarif-file-output=backend-code-sec.sarif

      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@main
        with:
          sarif_file: backend-code-sec.sarif

  build-frontend-image:
    needs: frontend-code-security
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
      id-token: write
    defaults:
      run:
        working-directory: ./quiz-app
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build image
        run: docker build -t quiz/frontend:${{ github-sha }} .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: "image"
          image-ref: "quiz/frontend:${{ github-sha }}"
          format: sarif
          output: frontend-image-scan.sarif
          severity: "CRITICAL,HIGH"

      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: frontend-image-scan.sarif

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: workshop/frontend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

  build-backend-image:
    needs: backend-code-security
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
      id-token: write
    defaults:
      run:
        working-directory: ./backend
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build image
        run: docker build -t quiz/backend:${{ github-sha }} .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: "image"
          image-ref: "quiz/backend:${{ github-sha }}"
          format: sarif
          output: backend-image-scan.sarif
          severity: "CRITICAL,HIGH"

      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: backend-image-scan.sarif

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: workshop/backend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

  k8s-manifest-scan:
    needs: [backend-code-security, frontend-code-security]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./kubenetes-manifest
    permissions:
      actions: read
      security-events: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Run Snyk to check Kubernetes manifest file for issues
        uses: snyk/actions/iac@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif --sarif-file-output=k8s-manifest.sarif
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@main
        with:
          sarif_file: k8s-manifest.sarif
